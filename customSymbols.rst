===================================
Cutsom Schematic Component Symbols
===================================

When you search online for a Spice model of a specific component you normally get a subcircuit definition of the device.

:code:`.SUBCKT LM723 2 3 4 5 6 7 9 10 11 12 13`

This specific device may be a 
  - transistor
  - inductor, capacitor, resistor, diode, ...
  - integrated circuit, current regulator, operational amplifier,...
  - ...

Whatever it be, if it is defined as a *subcircuit* model you will *not* be able to use the standard device symbols listed in the schemtaic toolbar of LTSpice |schematicToolbar|

The existing components defined in the Component section will most probably not match up with the subcircuit definition, so safest way is to draw up our own symbol.

.. |schematicToolbar| image:: img/schematicToolbar.png

First step is to find online the **sub**-circuit definition of the device you would like to simulate and save this file in either the LTSpice subcircuit directory [#ltsubcktdir]_ *or* your own directory.

The next steps depend on how much time you are willing to invest in this symbol. The options are *semi*Auto to Manual.

---------------------
Auto-generated Block
---------------------

  - Start LTSpice and open the subcircuit definition file.
  - Highlight the name of the device are right-click to open the context menu and select **Create Symbol** |subckt_MenuCreateSymbol|
    
    + a Dialog will pop up identifying the name and number of nodes to map onto the symbol |subckt_SymCreateDlg|

  - Now you will have generated a new *ugly* symbol which is saved in a subdirectory called Auto Generated in the LTSpice symbols directory [#ltsymdir]_. |subckt_AutoGenSyn|
  - This symbol can be tweaked and saved and used right after **restarting LTSpice**.

    + Note that the pins are represented as in the subcircuit, to make sense of them you may want to change the display name from a number to a meaningfull word, unless these correspond to the device pin numbers and you are fine with that.

.. |subckt_AutoGenSyn| image:: img/subckt_SymbolAutoGenerated.png
.. |subckt_SymCreateDlg| image:: img/subckt_SymbolAutoGenerateDlg.png
.. |subckt_MenuCreateSymbol| image:: img/subckt_SymbolAutoGenerateMenu.png

--------------------------------
Copy and modify existing symbol
--------------------------------

  - Navigate to the LTSpice symbols directory [#ltsymdir]_ , copy and rename the file to the name of your new device.
  - Open the newly saved symobl file in LTSpice and tweak it with the symbol editor to your liking.


Link Subcircuit NetList to Symbol Pins
----------------------------------------

  - Open the subcircuit definition file, note the Netlist and understand which pin is represented by which node. |subcktFile|

    + in this file the nodes **1 2 3** form the netlist and are described as a comment below as corresponding to **Collector, Base** and **emitter** respectively.
    + IMPORTANT: **The actual node numbers do not matter, the order in which they are defined is important**.
    + In this example subcircuit definition the node numbers and the order happen to coincide, but in another case they may not.

  - Back in the symbol drawing file check the Netlist order of the defined Pins/Ports : *Menu:* **View --> Pin Table** |dlgNetList|

    + The number of pins must correspond to the number of nodes 
    + The pins Name and **SpiceOrder** should correspond to the Node sequence defined in the subcircuit file. **The sequence of numbers, Not the alpha/numeric value of the nodes themselves**

      * :code:`.SUBCKT TIP121 10 5 7 ` <-- has a spice order 1 --> node 10, 2 --> node 5, 3 --> node 7
      * a subcircuit definition may have several nodes, only the exposed nodes are defined in the subcircuit definition line

  - If you want to modify a pin/Port Name/Label or Netlist Order, right click on one of the defined pins on the symbol editor sheet and that specific Pins Properties will pop up. |dlgPinPortProp|

Link Symbol to Subcircuit Model File
-------------------------------------

  - With the symbol schematic file open and active in LTSpice open the Attributes window. */Cntrl+A/*

    + *Menu:* **Edit --> Attributes --> Edit Attributes** |dlgSymbolAttributeEditor|

+------------+---------+---------------------------------------------------------------------------------------+
| Attribute  | Value   | Comment                                                                               |
+============+=========+=======================================================================================+
|  Prefix    |  **X**  | This must be X otherwise LTSpice will not read the subcircuit definition              |
+------------+---------+---------------------------------------------------------------------------------------+
|  Value     |  ca3140 | The Name of the subcircuit as defined in the subcircuit file                          |
+------------+---------+---------------------------------------------------------------------------------------+
|            |         |                                                                                       |
|            |         |  absolute directory definition of the subcircuit file, can also be relative...        |
| ModelFile  | . . . . |  LTSpice searches in its .../lib/sub/ folder for model definition files aswell        |
+------------+---------+---------------------------------------------------------------------------------------+


.. |dlgSymbolAttributeEditor| image:: img\dlgSymbolAttributeEditor.png
.. |dlgPinPortProp| image:: img\dlgPinPortProp.png
.. |subcktFile| image:: img\subcktFile.png
.. |dlgNetList| image:: img\dlgPinListNetlistOrder.png


--------------
More in Depth
--------------

Here a couple of tips I have discovered along the way.

Symbolic directories
---------------------

  LTSpice checks for symbols in its Symbols Library Directory [#ltsymdir]. If you want to keep separate the work which you have put into Symbol Generation and Model Searching online I would recommend to put these files in a directory outside of the LTSpice installation directory. This way it will be easier to Maintain, more portable across systems and incase of updating LTSpice avoid undesired suprises.

  - In Windows to create a symbolic link we will use the command prompt.
  
    + *Run command prompt with Adminstrator rights*
  
  - Navigate to the LTSpice Library Directory
  - Create a symbolic directory Link to the directory where you will store your created symbols and subcircuits:

    + :code:`mklink /D mySym c:\usr\lib\spice\mySym`
    + :code:`mklink /D mySub c:\usr\lib\spice\mySub`

  - Now when browsing for a component defined, it will appear in the subdirectory named "mySym"
  - Now when defining the **ModelFile** you can use the relative notation :code:`mySym\lm123.sub`

Symbol File details
--------------------

The symbol generated in LTSpice with the symbol editor generates a text file which you can edit with any text editor you like. The drawing is defined with Lines, Circles, Pins... placed with pixel coordinates. The Attributes and Pins are also defined in this file, normally towards the end of the file.

  - *<descName>* in the line :code:`SYMATTR Value <descName>` is the name of the defined subcircuit
  - *<SpiceModelFileName>* in the line :code:`SYMATTR SpiceModel <SpiceModelFileName>` is the subcircuit definition filename  e.g. :code:`mySym\lm123.sub`
  - *<SubcktName>* in the line :code:`SYMATTR Value2 <SubcktName>` can also be used to define the name of the subcircuit
  - *<...>* in the line :code:`SYMATTR Description <...>` is the description you would like to give the component
  

  - You will notice the lines :code:`PINATTR SpiceOrder 1` and  :code:`PINATTR PinName In+`
  
    + These numbers should correspond to the definition within your *.subckt* for the symbol diagram to be coherent
    + Note that :code:`SpiceOrder` refers to the order in which the pins are defined in the subckt (left to right) not the actual numbers or letters

      * The PinName which describes the coherence between schematic and pin is what is important

:: 

  SYMATTR Prefix X
  SYMATTR Value TIP121
  SYMATTR ModelFile paui\TIP121.sub
  PIN 16 -48 LEFT 8
  PINATTR PinName C
  PINATTR SpiceOrder 1
  PIN -48 -16 TOP 8
  PINATTR PinName B
  PINATTR SpiceOrder 2
  PIN 16 48 LEFT 8
  PINATTR PinName E
  PINATTR SpiceOrder 3


Symbol Drawing Aids
--------------------

To trace a symbol that you have in a schematic I have used a [Glass2k] on Windows to allow you to adjust the transparency of the current active window. |prgGlass2k|

  - Open the datasheet with a pdf viewer
  - Activate the symbol editor window on LTSpice
  - Adjust the transparency of the LTSpice window so that you can see the Datasheet in the background.
  - Trace your symbol :)

I have a `backup copy of the program <rsc\Glass2k.exe.bku>`_ since it isn't maintained anymore and who knows how long the site will still be online.

.. |prgGlass2k| image:: img\prgGlass2k.png

---------
Resources
---------

  - `Electronics Point Forum Adding new components to LTSPICE <https://www.electronicspoint.com/resources/adding-new-components-to-ltspice.20/>`_
  - `Circuit Exchange Internationl - LTSpice - Create New Symbols <http://www.zen22142.zen.co.uk/ltspice/newsymbols.htm>`_ 

.. [Glass2k] http://chime.tv/products/glass2k.shtml
.. [#ltsubcktdir] *Windows:* C:\Program Files (x86)\LTC\LTspiceIV\lib\sub
.. [#ltsymdir] *Windows:* C:\Program Files (x86)\LTC\LTspiceIV\lib\sym